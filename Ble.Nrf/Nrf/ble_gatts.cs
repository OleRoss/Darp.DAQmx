// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NrfBleDriver
{
    /// <summary>GATTS API SVC numbers.</summary>
    public enum BLE_GATTS_SVCS
    {
        /// <summary>Add a service.</summary>
        SD_BLE_GATTS_SERVICE_ADD = 160,
        /// <summary>Add an included service.</summary>
        SD_BLE_GATTS_INCLUDE_ADD = 161,
        /// <summary>Add a characteristic.</summary>
        SD_BLE_GATTS_CHARACTERISTIC_ADD = 162,
        /// <summary>Add a generic attribute.</summary>
        SD_BLE_GATTS_DESCRIPTOR_ADD = 163,
        /// <summary>Set an attribute value.</summary>
        SD_BLE_GATTS_VALUE_SET = 164,
        /// <summary>Get an attribute value.</summary>
        SD_BLE_GATTS_VALUE_GET = 165,
        /// <summary>Handle Value Notification or Indication.</summary>
        SD_BLE_GATTS_HVX = 166,
        /// <summary>Perform a Service Changed Indication to one or more peers.</summary>
        SD_BLE_GATTS_SERVICE_CHANGED = 167,
        /// <summary>Reply to an authorization request for a read or write operation on one or more attributes.</summary>
        SD_BLE_GATTS_RW_AUTHORIZE_REPLY = 168,
        /// <summary>Set the persistent system attributes for a connection.</summary>
        SD_BLE_GATTS_SYS_ATTR_SET = 169,
        /// <summary>Retrieve the persistent system attributes.</summary>
        SD_BLE_GATTS_SYS_ATTR_GET = 170,
        /// <summary>Retrieve the first valid user handle.</summary>
        SD_BLE_GATTS_INITIAL_USER_HANDLE_GET = 171,
        /// <summary>Retrieve the UUID and/or metadata of an attribute.</summary>
        SD_BLE_GATTS_ATTR_GET = 172,
        /// <summary>Reply to Exchange MTU Request.</summary>
        SD_BLE_GATTS_EXCHANGE_MTU_REPLY = 173
    }

    /// <summary>GATT Server Event IDs.</summary>
    public enum BLE_GATTS_EVTS
    {
        /// <summary>Write operation performed.See</summary>
        BLE_GATTS_EVT_WRITE = 80,
        /// <summary>Read/Write Authorization request.Reply withSee</summary>
        BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST = 81,
        /// <summary>A persistent system attribute access is pending.Respond withSee</summary>
        BLE_GATTS_EVT_SYS_ATTR_MISSING = 82,
        /// <summary>Handle Value Confirmation.See</summary>
        BLE_GATTS_EVT_HVC = 83,
        /// <summary>Service Changed Confirmation.No additional event structure applies.</summary>
        BLE_GATTS_EVT_SC_CONFIRM = 84,
        /// <summary>Exchange MTU Request.Reply withSee</summary>
        BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST = 85,
        /// <summary>Peer failed to respond to an ATT request in time.See</summary>
        BLE_GATTS_EVT_TIMEOUT = 86,
        /// <summary>Handle Value Notification transmission complete.See</summary>
        BLE_GATTS_EVT_HVN_TX_COMPLETE = 87
    }

    /// <summary>GATTS Configuration IDs.</summary>
    /// <remarks>IDs that uniquely identify a GATTS configuration.</remarks>
    public enum BLE_GATTS_CFGS
    {
        /// <summary>Service changed configuration.</summary>
        BLE_GATTS_CFG_SERVICE_CHANGED = 160,
        /// <summary>Attribute table size configuration.</summary>
        BLE_GATTS_CFG_ATTR_TAB_SIZE = 161
    }

    /// <summary>BLE GATTS connection configuration parameters, set with</summary>
    /// <summary>Attribute metadata.</summary>
    /// <summary>GATT Attribute.</summary>
    /// <summary>GATT Attribute Value.</summary>
    /// <summary>GATT Characteristic Presentation Format.</summary>
    /// <summary>GATT Characteristic metadata.</summary>
    /// <summary>GATT Characteristic Definition Handles.</summary>
    /// <summary>GATT HVx parameters.</summary>
    /// <summary>GATT Authorization parameters.</summary>
    /// <summary>GATT Read or Write Authorize Reply parameters.</summary>
    /// <summary>Service Changed Inclusion configuration parameters, set with</summary>
    /// <summary>Attribute table size configuration parameters, set with</summary>
    /// <remarks>
    /// <para>::NRF_ERROR_INVALID_LENGTH One or more of the following is true:</para>
    /// <para>- The specified Attribute Table size is too small.</para>
    /// <para>The minimum acceptable size is defined by- The specified Attribute Table size is not a multiple of 4.</para>
    /// </remarks>
    /// <summary>Config structure for GATTS configurations.</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event substructure for authorized read requests, see</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event structure for</summary>
    /// <summary>Event structure for</summary>
    /// <summary>GATTS event structure.</summary>
    /// <summary>BLE GATTS connection configuration parameters, set with</summary>
    public unsafe partial class BleGattsConnCfgT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            internal byte hvn_tx_queue_size;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_conn_cfg_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsConnCfgT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsConnCfgT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsConnCfgT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsConnCfgT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsConnCfgT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsConnCfgT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsConnCfgT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsConnCfgT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsConnCfgT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsConnCfgT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsConnCfgT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsConnCfgT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsConnCfgT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsConnCfgT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsConnCfgT(global::NrfBleDriver.BleGattsConnCfgT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsConnCfgT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsConnCfgT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsConnCfgT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>
        /// <para>Minimum guaranteed number of Handle Value Notifications that can be queued for transmission.</para>
        /// <para>The default value is</para>
        /// </summary>
        public byte HvnTxQueueSize
        {
            get
            {
                return ((__Internal*)__Instance)->hvn_tx_queue_size;
            }

            set
            {
                ((__Internal*)__Instance)->hvn_tx_queue_size = value;
            }
        }
    }

    /// <summary>Attribute metadata.</summary>
    public unsafe partial class BleGattsAttrMdT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 3)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NrfBleDriver.BleGapConnSecModeT.__Internal read_perm;

            [FieldOffset(1)]
            internal global::NrfBleDriver.BleGapConnSecModeT.__Internal write_perm;

            [FieldOffset(2)]
            internal byte vlen;

            [FieldOffset(2)]
            internal byte vloc;

            [FieldOffset(2)]
            internal byte rd_auth;

            [FieldOffset(2)]
            internal byte wr_auth;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_attr_md_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAttrMdT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAttrMdT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsAttrMdT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsAttrMdT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsAttrMdT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsAttrMdT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsAttrMdT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsAttrMdT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsAttrMdT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsAttrMdT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsAttrMdT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsAttrMdT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsAttrMdT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAttrMdT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsAttrMdT(global::NrfBleDriver.BleGattsAttrMdT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAttrMdT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsAttrMdT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsAttrMdT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Read permissions.</summary>
        public global::NrfBleDriver.BleGapConnSecModeT ReadPerm
        {
            get
            {
                return global::NrfBleDriver.BleGapConnSecModeT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->read_perm));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->read_perm = *(global::NrfBleDriver.BleGapConnSecModeT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Write permissions.</summary>
        public global::NrfBleDriver.BleGapConnSecModeT WritePerm
        {
            get
            {
                return global::NrfBleDriver.BleGapConnSecModeT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->write_perm));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->write_perm = *(global::NrfBleDriver.BleGapConnSecModeT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Variable length attribute.</summary>
        public byte Vlen
        {
            get
            {
                return ((__Internal*)__Instance)->vlen;
            }

            set
            {
                ((__Internal*)__Instance)->vlen = value;
            }
        }

        /// <summary>Value location, see</summary>
        public byte Vloc
        {
            get
            {
                return ((__Internal*)__Instance)->vloc;
            }

            set
            {
                ((__Internal*)__Instance)->vloc = value;
            }
        }

        /// <summary>Read authorization and value will be requested from the application on every read operation.</summary>
        public byte RdAuth
        {
            get
            {
                return ((__Internal*)__Instance)->rd_auth;
            }

            set
            {
                ((__Internal*)__Instance)->rd_auth = value;
            }
        }

        /// <summary>Write authorization will be requested from the application on every Write Request operation (but not Write Command).</summary>
        public byte WrAuth
        {
            get
            {
                return ((__Internal*)__Instance)->wr_auth;
            }

            set
            {
                ((__Internal*)__Instance)->wr_auth = value;
            }
        }
    }

    /// <summary>GATT Attribute.</summary>
    public unsafe partial class BleGattsAttrT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr p_uuid;
            internal __IntPtr p_attr_md;
            internal ushort init_len;
            internal ushort init_offs;
            internal ushort max_len;
            internal __IntPtr p_value;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_attr_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAttrT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAttrT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsAttrT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsAttrT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsAttrT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsAttrT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsAttrT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsAttrT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsAttrT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsAttrT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsAttrT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsAttrT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsAttrT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAttrT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsAttrT(global::NrfBleDriver.BleGattsAttrT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAttrT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsAttrT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsAttrT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Pointer to the attribute UUID.</summary>
        public global::NrfBleDriver.BleUuidT PUuid
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleUuidT.__GetOrCreateInstance(((__Internal*)__Instance)->p_uuid, false);
                return __result0;
            }
        }

        /// <summary>Pointer to the attribute metadata structure.</summary>
        public global::NrfBleDriver.BleGattsAttrMdT PAttrMd
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleGattsAttrMdT.__GetOrCreateInstance(((__Internal*)__Instance)->p_attr_md, false);
                return __result0;
            }
        }

        /// <summary>Initial attribute value length in bytes.</summary>
        public ushort InitLen
        {
            get
            {
                return ((__Internal*)__Instance)->init_len;
            }

            set
            {
                ((__Internal*)__Instance)->init_len = value;
            }
        }

        /// <summary>Initial attribute value offset in bytes. If different from zero, the first init_offs bytes of the attribute value will be left uninitialized.</summary>
        public ushort InitOffs
        {
            get
            {
                return ((__Internal*)__Instance)->init_offs;
            }

            set
            {
                ((__Internal*)__Instance)->init_offs = value;
            }
        }

        /// <summary>Maximum attribute value length in bytes, seefor maximum values.</summary>
        public ushort MaxLen
        {
            get
            {
                return ((__Internal*)__Instance)->max_len;
            }

            set
            {
                ((__Internal*)__Instance)->max_len = value;
            }
        }

        /// <summary>
        /// <para>Pointer to the attribute data. Please note that if thevalue location is selected in the attribute metadata, this will have to point to a buffer</para>
        /// <para>that remains valid through the lifetime of the attribute. This excludes usage of automatic variables that may go out of scope or any other temporary location.</para>
        /// <para>The stack may access that memory directly without the application's knowledge. For writable characteristics, this value must not be a location in flash memory.</para>
        /// </summary>
        public byte* PValue
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->p_value;
            }

            set
            {
                ((__Internal*)__Instance)->p_value = (__IntPtr) value;
            }
        }
    }

    /// <summary>GATT Attribute Value.</summary>
    public unsafe partial class BleGattsValueT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ushort len;
            internal ushort offset;
            internal __IntPtr p_value;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_value_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsValueT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsValueT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsValueT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsValueT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsValueT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsValueT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsValueT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsValueT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsValueT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsValueT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsValueT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsValueT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsValueT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsValueT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsValueT(global::NrfBleDriver.BleGattsValueT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsValueT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsValueT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsValueT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Length in bytes to be written or read. Length in bytes written or read after successful return.</summary>
        public ushort Len
        {
            get
            {
                return ((__Internal*)__Instance)->len;
            }

            set
            {
                ((__Internal*)__Instance)->len = value;
            }
        }

        /// <summary>Attribute value offset.</summary>
        public ushort Offset
        {
            get
            {
                return ((__Internal*)__Instance)->offset;
            }

            set
            {
                ((__Internal*)__Instance)->offset = value;
            }
        }

        /// <summary>
        /// <para>Pointer to where value is stored or will be stored.</para>
        /// <para>If value is stored in user memory, only the attribute length is updated when p_value == NULL.</para>
        /// <para>Set to NULL when reading to obtain the complete length of the attribute value</para>
        /// </summary>
        public byte* PValue
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->p_value;
            }

            set
            {
                ((__Internal*)__Instance)->p_value = (__IntPtr) value;
            }
        }
    }

    /// <summary>GATT Characteristic Presentation Format.</summary>
    public unsafe partial class BleGattsCharPfT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal byte format;
            internal sbyte exponent;
            internal ushort unit;
            internal byte name_space;
            internal ushort desc;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_char_pf_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharPfT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharPfT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsCharPfT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsCharPfT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsCharPfT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCharPfT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCharPfT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsCharPfT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsCharPfT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCharPfT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsCharPfT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsCharPfT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsCharPfT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharPfT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsCharPfT(global::NrfBleDriver.BleGattsCharPfT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharPfT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsCharPfT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsCharPfT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Format of the value, see</summary>
        public byte Format
        {
            get
            {
                return ((__Internal*)__Instance)->format;
            }

            set
            {
                ((__Internal*)__Instance)->format = value;
            }
        }

        /// <summary>Exponent for integer data types.</summary>
        public sbyte Exponent
        {
            get
            {
                return ((__Internal*)__Instance)->exponent;
            }

            set
            {
                ((__Internal*)__Instance)->exponent = value;
            }
        }

        /// <summary>Unit from Bluetooth Assigned Numbers.</summary>
        public ushort Unit
        {
            get
            {
                return ((__Internal*)__Instance)->unit;
            }

            set
            {
                ((__Internal*)__Instance)->unit = value;
            }
        }

        /// <summary>Namespace from Bluetooth Assigned Numbers, see</summary>
        public byte NameSpace
        {
            get
            {
                return ((__Internal*)__Instance)->name_space;
            }

            set
            {
                ((__Internal*)__Instance)->name_space = value;
            }
        }

        /// <summary>Namespace description from Bluetooth Assigned Numbers, see</summary>
        public ushort Desc
        {
            get
            {
                return ((__Internal*)__Instance)->desc;
            }

            set
            {
                ((__Internal*)__Instance)->desc = value;
            }
        }
    }

    /// <summary>GATT Characteristic metadata.</summary>
    public unsafe partial class BleGattsCharMdT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::NrfBleDriver.BleGattCharPropsT.__Internal char_props;
            internal global::NrfBleDriver.BleGattCharExtPropsT.__Internal char_ext_props;
            internal __IntPtr p_char_user_desc;
            internal ushort char_user_desc_max_size;
            internal ushort char_user_desc_size;
            internal __IntPtr p_char_pf;
            internal __IntPtr p_user_desc_md;
            internal __IntPtr p_cccd_md;
            internal __IntPtr p_sccd_md;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_char_md_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharMdT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharMdT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsCharMdT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsCharMdT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsCharMdT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCharMdT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCharMdT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsCharMdT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsCharMdT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCharMdT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsCharMdT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsCharMdT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsCharMdT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharMdT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsCharMdT(global::NrfBleDriver.BleGattsCharMdT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharMdT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsCharMdT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsCharMdT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Characteristic Properties.</summary>
        public global::NrfBleDriver.BleGattCharPropsT CharProps
        {
            get
            {
                return global::NrfBleDriver.BleGattCharPropsT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->char_props));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->char_props = *(global::NrfBleDriver.BleGattCharPropsT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Characteristic Extended Properties.</summary>
        public global::NrfBleDriver.BleGattCharExtPropsT CharExtProps
        {
            get
            {
                return global::NrfBleDriver.BleGattCharExtPropsT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->char_ext_props));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->char_ext_props = *(global::NrfBleDriver.BleGattCharExtPropsT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Pointer to a UTF-8 encoded string (non-NULL terminated), NULL if the descriptor is not required.</summary>
        public byte* PCharUserDesc
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->p_char_user_desc;
            }
        }

        /// <summary>The maximum size in bytes of the user description descriptor.</summary>
        public ushort CharUserDescMaxSize
        {
            get
            {
                return ((__Internal*)__Instance)->char_user_desc_max_size;
            }

            set
            {
                ((__Internal*)__Instance)->char_user_desc_max_size = value;
            }
        }

        /// <summary>The size of the user description, must be smaller or equal to char_user_desc_max_size.</summary>
        public ushort CharUserDescSize
        {
            get
            {
                return ((__Internal*)__Instance)->char_user_desc_size;
            }

            set
            {
                ((__Internal*)__Instance)->char_user_desc_size = value;
            }
        }

        /// <summary>Pointer to a presentation format structure or NULL if the CPF descriptor is not required.</summary>
        public global::NrfBleDriver.BleGattsCharPfT PCharPf
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleGattsCharPfT.__GetOrCreateInstance(((__Internal*)__Instance)->p_char_pf, false);
                return __result0;
            }
        }

        /// <summary>Attribute metadata for the User Description descriptor, or NULL for default values.</summary>
        public global::NrfBleDriver.BleGattsAttrMdT PUserDescMd
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleGattsAttrMdT.__GetOrCreateInstance(((__Internal*)__Instance)->p_user_desc_md, false);
                return __result0;
            }
        }

        /// <summary>Attribute metadata for the Client Characteristic Configuration Descriptor, or NULL for default values.</summary>
        public global::NrfBleDriver.BleGattsAttrMdT PCccdMd
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleGattsAttrMdT.__GetOrCreateInstance(((__Internal*)__Instance)->p_cccd_md, false);
                return __result0;
            }
        }

        /// <summary>Attribute metadata for the Server Characteristic Configuration Descriptor, or NULL for default values.</summary>
        public global::NrfBleDriver.BleGattsAttrMdT PSccdMd
        {
            get
            {
                var __result0 = global::NrfBleDriver.BleGattsAttrMdT.__GetOrCreateInstance(((__Internal*)__Instance)->p_sccd_md, false);
                return __result0;
            }
        }
    }

    /// <summary>GATT Characteristic Definition Handles.</summary>
    public unsafe partial class BleGattsCharHandlesT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal ushort value_handle;
            internal ushort user_desc_handle;
            internal ushort cccd_handle;
            internal ushort sccd_handle;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_char_handles_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharHandlesT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCharHandlesT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsCharHandlesT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsCharHandlesT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsCharHandlesT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCharHandlesT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCharHandlesT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsCharHandlesT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsCharHandlesT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCharHandlesT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsCharHandlesT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsCharHandlesT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsCharHandlesT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharHandlesT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsCharHandlesT(global::NrfBleDriver.BleGattsCharHandlesT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCharHandlesT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsCharHandlesT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsCharHandlesT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Handle to the characteristic value.</summary>
        public ushort ValueHandle
        {
            get
            {
                return ((__Internal*)__Instance)->value_handle;
            }

            set
            {
                ((__Internal*)__Instance)->value_handle = value;
            }
        }

        /// <summary>Handle to the User Description descriptor, orif not present.</summary>
        public ushort UserDescHandle
        {
            get
            {
                return ((__Internal*)__Instance)->user_desc_handle;
            }

            set
            {
                ((__Internal*)__Instance)->user_desc_handle = value;
            }
        }

        /// <summary>Handle to the Client Characteristic Configuration Descriptor, orif not present.</summary>
        public ushort CccdHandle
        {
            get
            {
                return ((__Internal*)__Instance)->cccd_handle;
            }

            set
            {
                ((__Internal*)__Instance)->cccd_handle = value;
            }
        }

        /// <summary>Handle to the Server Characteristic Configuration Descriptor, orif not present.</summary>
        public ushort SccdHandle
        {
            get
            {
                return ((__Internal*)__Instance)->sccd_handle;
            }

            set
            {
                ((__Internal*)__Instance)->sccd_handle = value;
            }
        }
    }

    /// <summary>GATT HVx parameters.</summary>
    public unsafe partial class BleGattsHvxParamsT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal ushort handle;
            internal byte type;
            internal ushort offset;
            internal __IntPtr p_len;
            internal __IntPtr p_data;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_hvx_params_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsHvxParamsT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsHvxParamsT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsHvxParamsT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsHvxParamsT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsHvxParamsT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsHvxParamsT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsHvxParamsT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsHvxParamsT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsHvxParamsT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsHvxParamsT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsHvxParamsT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsHvxParamsT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsHvxParamsT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsHvxParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsHvxParamsT(global::NrfBleDriver.BleGattsHvxParamsT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsHvxParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsHvxParamsT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsHvxParamsT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Characteristic Value Handle.</summary>
        public ushort Handle
        {
            get
            {
                return ((__Internal*)__Instance)->handle;
            }

            set
            {
                ((__Internal*)__Instance)->handle = value;
            }
        }

        /// <summary>Indication or Notification, see</summary>
        public byte Type
        {
            get
            {
                return ((__Internal*)__Instance)->type;
            }

            set
            {
                ((__Internal*)__Instance)->type = value;
            }
        }

        /// <summary>Offset within the attribute value.</summary>
        public ushort Offset
        {
            get
            {
                return ((__Internal*)__Instance)->offset;
            }

            set
            {
                ((__Internal*)__Instance)->offset = value;
            }
        }

        /// <summary>Length in bytes to be written, length in bytes written after successful return.</summary>
        public ushort* PLen
        {
            get
            {
                return (ushort*) ((__Internal*)__Instance)->p_len;
            }

            set
            {
                ((__Internal*)__Instance)->p_len = (__IntPtr) value;
            }
        }

        /// <summary>Actual data content, use NULL to use the current attribute value.</summary>
        public byte* PData
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->p_data;
            }
        }
    }

    /// <summary>GATT Authorization parameters.</summary>
    public unsafe partial class BleGattsAuthorizeParamsT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ushort gatt_status;
            internal byte update;
            internal ushort offset;
            internal ushort len;
            internal __IntPtr p_data;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_authorize_params_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAuthorizeParamsT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsAuthorizeParamsT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsAuthorizeParamsT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsAuthorizeParamsT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsAuthorizeParamsT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsAuthorizeParamsT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsAuthorizeParamsT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsAuthorizeParamsT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsAuthorizeParamsT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsAuthorizeParamsT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsAuthorizeParamsT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsAuthorizeParamsT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsAuthorizeParamsT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsAuthorizeParamsT(global::NrfBleDriver.BleGattsAuthorizeParamsT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>GATT status code for the operation, see</summary>
        public ushort GattStatus
        {
            get
            {
                return ((__Internal*)__Instance)->gatt_status;
            }

            set
            {
                ((__Internal*)__Instance)->gatt_status = value;
            }
        }

        /// <summary>
        /// <para>If set, data supplied in p_data will be used to update the attribute value.</para>
        /// <para>Please note that foroperations this bit must always be set,</para>
        /// <para>as the data to be written needs to be stored and later provided by the application.</para>
        /// </summary>
        public byte Update
        {
            get
            {
                return ((__Internal*)__Instance)->update;
            }

            set
            {
                ((__Internal*)__Instance)->update = value;
            }
        }

        /// <summary>Offset of the attribute value being updated.</summary>
        public ushort Offset
        {
            get
            {
                return ((__Internal*)__Instance)->offset;
            }

            set
            {
                ((__Internal*)__Instance)->offset = value;
            }
        }

        /// <summary>Length in bytes of the value in p_data pointer, see</summary>
        public ushort Len
        {
            get
            {
                return ((__Internal*)__Instance)->len;
            }

            set
            {
                ((__Internal*)__Instance)->len = value;
            }
        }

        /// <summary>Pointer to new value used to update the attribute value.</summary>
        public byte* PData
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->p_data;
            }
        }
    }

    /// <summary>GATT Read or Write Authorize Reply parameters.</summary>
    public unsafe partial class BleGattsRwAuthorizeReplyParamsT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal byte type;
            internal global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.Params.__Internal @params;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_rw_authorize_reply_params_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public unsafe partial struct Params
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal read;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal write;

                [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0<unnamed-type-params>@ble_gatts_rw_authorize_reply_params_t@@QEAA@AEBT01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
            }

            private Params.__Internal __instance;
            internal Params.__Internal __Instance => __instance;

            internal static Params __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Params(native.ToPointer(), skipVTables);
            }

            internal static Params __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Params(native, skipVTables);
            }

            private Params(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Params(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.Params.__Internal*) native;
            }

            public Params(global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.Params __0)
                : this()
            {
                var ____arg0 = __0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            /// <summary>Read authorization parameters.</summary>
            public global::NrfBleDriver.BleGattsAuthorizeParamsT Read
            {
                get
                {
                    return global::NrfBleDriver.BleGattsAuthorizeParamsT.__CreateInstance(__instance.read);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.read = *(global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Write authorization parameters.</summary>
            public global::NrfBleDriver.BleGattsAuthorizeParamsT Write
            {
                get
                {
                    return global::NrfBleDriver.BleGattsAuthorizeParamsT.__CreateInstance(__instance.write);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.write = *(global::NrfBleDriver.BleGattsAuthorizeParamsT.__Internal*) value.__Instance;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsRwAuthorizeReplyParamsT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsRwAuthorizeReplyParamsT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsRwAuthorizeReplyParamsT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsRwAuthorizeReplyParamsT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsRwAuthorizeReplyParamsT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsRwAuthorizeReplyParamsT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsRwAuthorizeReplyParamsT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsRwAuthorizeReplyParamsT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsRwAuthorizeReplyParamsT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsRwAuthorizeReplyParamsT(global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Type of authorize operation, see</summary>
        public byte Type
        {
            get
            {
                return ((__Internal*)__Instance)->type;
            }

            set
            {
                ((__Internal*)__Instance)->type = value;
            }
        }

        /// <summary>Reply Parameters.</summary>
        public global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.Params @params
        {
            get
            {
                return global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT.Params.__CreateInstance(((__Internal*)__Instance)->@params);
            }

            set
            {
                ((__Internal*)__Instance)->@params = value.__Instance;
            }
        }
    }

    /// <summary>Service Changed Inclusion configuration parameters, set with</summary>
    public unsafe partial class BleGattsCfgServiceChangedT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            internal byte service_changed;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_cfg_service_changed_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCfgServiceChangedT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCfgServiceChangedT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsCfgServiceChangedT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsCfgServiceChangedT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsCfgServiceChangedT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCfgServiceChangedT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCfgServiceChangedT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsCfgServiceChangedT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsCfgServiceChangedT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCfgServiceChangedT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsCfgServiceChangedT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsCfgServiceChangedT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsCfgServiceChangedT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsCfgServiceChangedT(global::NrfBleDriver.BleGattsCfgServiceChangedT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>If 1, include the Service Changed characteristic in the Attribute Table. Default is</summary>
        public byte ServiceChanged
        {
            get
            {
                return ((__Internal*)__Instance)->service_changed;
            }

            set
            {
                ((__Internal*)__Instance)->service_changed = value;
            }
        }
    }

    /// <summary>Attribute table size configuration parameters, set with</summary>
    /// <remarks>
    /// <para>::NRF_ERROR_INVALID_LENGTH One or more of the following is true:</para>
    /// <para>- The specified Attribute Table size is too small.</para>
    /// <para>The minimum acceptable size is defined by- The specified Attribute Table size is not a multiple of 4.</para>
    /// </remarks>
    public unsafe partial class BleGattsCfgAttrTabSizeT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint attr_tab_size;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_cfg_attr_tab_size_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCfgAttrTabSizeT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsCfgAttrTabSizeT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsCfgAttrTabSizeT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsCfgAttrTabSizeT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsCfgAttrTabSizeT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCfgAttrTabSizeT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCfgAttrTabSizeT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsCfgAttrTabSizeT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsCfgAttrTabSizeT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCfgAttrTabSizeT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsCfgAttrTabSizeT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsCfgAttrTabSizeT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsCfgAttrTabSizeT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsCfgAttrTabSizeT(global::NrfBleDriver.BleGattsCfgAttrTabSizeT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Attribute table size. Default isminimum is</summary>
        public uint AttrTabSize
        {
            get
            {
                return ((__Internal*)__Instance)->attr_tab_size;
            }

            set
            {
                ((__Internal*)__Instance)->attr_tab_size = value;
            }
        }
    }

    /// <summary>Config structure for GATTS configurations.</summary>
    public unsafe partial struct BleGattsCfgT
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal service_changed;

            [FieldOffset(0)]
            internal global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal attr_tab_size;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_cfg_t@@QEAA@AEBT0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        private BleGattsCfgT.__Internal __instance;
        internal BleGattsCfgT.__Internal __Instance => __instance;

        internal static BleGattsCfgT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsCfgT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsCfgT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsCfgT(native, skipVTables);
        }

        private BleGattsCfgT(__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private BleGattsCfgT(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::NrfBleDriver.BleGattsCfgT.__Internal*) native;
        }

        public BleGattsCfgT(global::NrfBleDriver.BleGattsCfgT __0)
            : this()
        {
            var ____arg0 = __0.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
            }
        }

        /// <summary>Include service changed characteristic, cfg_id is</summary>
        public global::NrfBleDriver.BleGattsCfgServiceChangedT ServiceChanged
        {
            get
            {
                return global::NrfBleDriver.BleGattsCfgServiceChangedT.__CreateInstance(__instance.service_changed);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.service_changed = *(global::NrfBleDriver.BleGattsCfgServiceChangedT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Attribute table size, cfg_id is</summary>
        public global::NrfBleDriver.BleGattsCfgAttrTabSizeT AttrTabSize
        {
            get
            {
                return global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__CreateInstance(__instance.attr_tab_size);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.attr_tab_size = *(global::NrfBleDriver.BleGattsCfgAttrTabSizeT.__Internal*) value.__Instance;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtWriteT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 14)]
        public partial struct __Internal
        {
            internal ushort handle;
            internal global::NrfBleDriver.BleUuidT.__Internal uuid;
            internal byte op;
            internal byte auth_required;
            internal ushort offset;
            internal ushort len;
            internal fixed byte data[1];

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_write_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtWriteT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtWriteT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtWriteT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtWriteT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtWriteT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtWriteT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtWriteT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtWriteT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtWriteT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtWriteT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtWriteT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtWriteT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtWriteT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtWriteT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtWriteT(global::NrfBleDriver.BleGattsEvtWriteT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtWriteT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtWriteT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtWriteT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Attribute Handle.</summary>
        public ushort Handle
        {
            get
            {
                return ((__Internal*)__Instance)->handle;
            }

            set
            {
                ((__Internal*)__Instance)->handle = value;
            }
        }

        /// <summary>Attribute UUID.</summary>
        public global::NrfBleDriver.BleUuidT Uuid
        {
            get
            {
                return global::NrfBleDriver.BleUuidT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->uuid));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->uuid = *(global::NrfBleDriver.BleUuidT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Type of write operation, see</summary>
        public byte Op
        {
            get
            {
                return ((__Internal*)__Instance)->op;
            }

            set
            {
                ((__Internal*)__Instance)->op = value;
            }
        }

        /// <summary>Writing operation deferred due to authorization requirement. Application may useto finalize the writing operation.</summary>
        public byte AuthRequired
        {
            get
            {
                return ((__Internal*)__Instance)->auth_required;
            }

            set
            {
                ((__Internal*)__Instance)->auth_required = value;
            }
        }

        /// <summary>Offset for the write operation.</summary>
        public ushort Offset
        {
            get
            {
                return ((__Internal*)__Instance)->offset;
            }

            set
            {
                ((__Internal*)__Instance)->offset = value;
            }
        }

        /// <summary>Length of the received data.</summary>
        public ushort Len
        {
            get
            {
                return ((__Internal*)__Instance)->len;
            }

            set
            {
                ((__Internal*)__Instance)->len = value;
            }
        }

        /// <summary>Received data.</summary>
        /// <remarks>
        /// <para>This is a variable length array. The size of 1 indicated is only a placeholder for compilation.</para>
        /// <para>Seefor more information on how to use event structures with variable length array members.</para>
        /// </remarks>
        public byte[] Data
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->data, 1);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    /// <summary>Event substructure for authorized read requests, see</summary>
    public unsafe partial class BleGattsEvtReadT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal ushort handle;
            internal global::NrfBleDriver.BleUuidT.__Internal uuid;
            internal ushort offset;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_read_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtReadT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtReadT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtReadT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtReadT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtReadT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtReadT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtReadT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtReadT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtReadT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtReadT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtReadT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtReadT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtReadT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtReadT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtReadT(global::NrfBleDriver.BleGattsEvtReadT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtReadT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtReadT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtReadT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Attribute Handle.</summary>
        public ushort Handle
        {
            get
            {
                return ((__Internal*)__Instance)->handle;
            }

            set
            {
                ((__Internal*)__Instance)->handle = value;
            }
        }

        /// <summary>Attribute UUID.</summary>
        public global::NrfBleDriver.BleUuidT Uuid
        {
            get
            {
                return global::NrfBleDriver.BleUuidT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->uuid));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->uuid = *(global::NrfBleDriver.BleUuidT.__Internal*) value.__Instance;
            }
        }

        /// <summary>Offset for the read operation.</summary>
        public ushort Offset
        {
            get
            {
                return ((__Internal*)__Instance)->offset;
            }

            set
            {
                ((__Internal*)__Instance)->offset = value;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtRwAuthorizeRequestT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal byte type;
            internal global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.Request.__Internal request;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_rw_authorize_request_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public unsafe partial struct Request
        {
            [StructLayout(LayoutKind.Explicit, Size = 14)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtReadT.__Internal read;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtWriteT.__Internal write;

                [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0<unnamed-type-request>@ble_gatts_evt_rw_authorize_request_t@@QEAA@AEBT01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
            }

            private Request.__Internal __instance;
            internal Request.__Internal __Instance => __instance;

            internal static Request __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Request(native.ToPointer(), skipVTables);
            }

            internal static Request __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Request(native, skipVTables);
            }

            private Request(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Request(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.Request.__Internal*) native;
            }

            public Request(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.Request __0)
                : this()
            {
                var ____arg0 = __0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            /// <summary>Attribute Read Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtReadT Read
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtReadT.__CreateInstance(__instance.read);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.read = *(global::NrfBleDriver.BleGattsEvtReadT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Attribute Write Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtWriteT Write
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtWriteT.__CreateInstance(__instance.write);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.write = *(global::NrfBleDriver.BleGattsEvtWriteT.__Internal*) value.__Instance;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtRwAuthorizeRequestT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtRwAuthorizeRequestT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtRwAuthorizeRequestT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtRwAuthorizeRequestT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtRwAuthorizeRequestT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtRwAuthorizeRequestT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtRwAuthorizeRequestT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtRwAuthorizeRequestT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtRwAuthorizeRequestT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtRwAuthorizeRequestT(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Type of authorize operation, see</summary>
        public byte Type
        {
            get
            {
                return ((__Internal*)__Instance)->type;
            }

            set
            {
                ((__Internal*)__Instance)->type = value;
            }
        }

        /// <summary>Request Parameters.</summary>
        public global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.Request request
        {
            get
            {
                return global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.Request.__CreateInstance(((__Internal*)__Instance)->request);
            }

            set
            {
                ((__Internal*)__Instance)->request = value.__Instance;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtSysAttrMissingT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            internal byte hint;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_sys_attr_missing_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtSysAttrMissingT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtSysAttrMissingT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtSysAttrMissingT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtSysAttrMissingT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtSysAttrMissingT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtSysAttrMissingT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtSysAttrMissingT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtSysAttrMissingT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtSysAttrMissingT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtSysAttrMissingT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtSysAttrMissingT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtSysAttrMissingT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtSysAttrMissingT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtSysAttrMissingT(global::NrfBleDriver.BleGattsEvtSysAttrMissingT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Hint (currently unused).</summary>
        public byte Hint
        {
            get
            {
                return ((__Internal*)__Instance)->hint;
            }

            set
            {
                ((__Internal*)__Instance)->hint = value;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtHvcT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2)]
        public partial struct __Internal
        {
            internal ushort handle;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_hvc_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtHvcT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtHvcT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtHvcT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtHvcT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtHvcT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtHvcT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtHvcT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtHvcT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtHvcT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtHvcT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtHvcT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtHvcT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtHvcT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtHvcT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtHvcT(global::NrfBleDriver.BleGattsEvtHvcT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtHvcT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtHvcT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtHvcT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Attribute Handle.</summary>
        public ushort Handle
        {
            get
            {
                return ((__Internal*)__Instance)->handle;
            }

            set
            {
                ((__Internal*)__Instance)->handle = value;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtExchangeMtuRequestT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2)]
        public partial struct __Internal
        {
            internal ushort client_rx_mtu;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_exchange_mtu_request_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtExchangeMtuRequestT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtExchangeMtuRequestT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtExchangeMtuRequestT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtExchangeMtuRequestT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtExchangeMtuRequestT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtExchangeMtuRequestT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtExchangeMtuRequestT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtExchangeMtuRequestT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtExchangeMtuRequestT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtExchangeMtuRequestT(global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Client RX MTU size.</summary>
        public ushort ClientRxMtu
        {
            get
            {
                return ((__Internal*)__Instance)->client_rx_mtu;
            }

            set
            {
                ((__Internal*)__Instance)->client_rx_mtu = value;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtTimeoutT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            internal byte src;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_timeout_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtTimeoutT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtTimeoutT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtTimeoutT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtTimeoutT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtTimeoutT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtTimeoutT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtTimeoutT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtTimeoutT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtTimeoutT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtTimeoutT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtTimeoutT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtTimeoutT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtTimeoutT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtTimeoutT(global::NrfBleDriver.BleGattsEvtTimeoutT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Timeout source, see</summary>
        public byte Src
        {
            get
            {
                return ((__Internal*)__Instance)->src;
            }

            set
            {
                ((__Internal*)__Instance)->src = value;
            }
        }
    }

    /// <summary>Event structure for</summary>
    public unsafe partial class BleGattsEvtHvnTxCompleteT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            internal byte count;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_hvn_tx_complete_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtHvnTxCompleteT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtHvnTxCompleteT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtHvnTxCompleteT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtHvnTxCompleteT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtHvnTxCompleteT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtHvnTxCompleteT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtHvnTxCompleteT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtHvnTxCompleteT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtHvnTxCompleteT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtHvnTxCompleteT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtHvnTxCompleteT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtHvnTxCompleteT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtHvnTxCompleteT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtHvnTxCompleteT(global::NrfBleDriver.BleGattsEvtHvnTxCompleteT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Number of notification transmissions completed.</summary>
        public byte Count
        {
            get
            {
                return ((__Internal*)__Instance)->count;
            }

            set
            {
                ((__Internal*)__Instance)->count = value;
            }
        }
    }

    /// <summary>GATTS event structure.</summary>
    public unsafe partial class BleGattsEvtT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 18)]
        public partial struct __Internal
        {
            internal ushort conn_handle;
            internal global::NrfBleDriver.BleGattsEvtT.Params.__Internal @params;

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0ble_gatts_evt_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public unsafe partial struct Params
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtWriteT.__Internal write;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal authorize_request;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal sys_attr_missing;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtHvcT.__Internal hvc;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal exchange_mtu_request;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal timeout;

                [FieldOffset(0)]
                internal global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal hvn_tx_complete;

                [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0<unnamed-type-params>@ble_gatts_evt_t@@QEAA@AEBT01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
            }

            private Params.__Internal __instance;
            internal Params.__Internal __Instance => __instance;

            internal static Params __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                return new Params(native.ToPointer(), skipVTables);
            }

            internal static Params __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Params(native, skipVTables);
            }

            private Params(__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Params(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::NrfBleDriver.BleGattsEvtT.Params.__Internal*) native;
            }

            public Params(global::NrfBleDriver.BleGattsEvtT.Params __0)
                : this()
            {
                var ____arg0 = __0.__Instance;
                var __arg0 = new __IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
                }
            }

            /// <summary>Write Event Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtWriteT Write
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtWriteT.__CreateInstance(__instance.write);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.write = *(global::NrfBleDriver.BleGattsEvtWriteT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Read or Write Authorize Request Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT AuthorizeRequest
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__CreateInstance(__instance.authorize_request);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.authorize_request = *(global::NrfBleDriver.BleGattsEvtRwAuthorizeRequestT.__Internal*) value.__Instance;
                }
            }

            /// <summary>System attributes missing.</summary>
            public global::NrfBleDriver.BleGattsEvtSysAttrMissingT SysAttrMissing
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__CreateInstance(__instance.sys_attr_missing);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.sys_attr_missing = *(global::NrfBleDriver.BleGattsEvtSysAttrMissingT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Handle Value Confirmation Event Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtHvcT Hvc
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtHvcT.__CreateInstance(__instance.hvc);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.hvc = *(global::NrfBleDriver.BleGattsEvtHvcT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Exchange MTU Request Event Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT ExchangeMtuRequest
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__CreateInstance(__instance.exchange_mtu_request);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.exchange_mtu_request = *(global::NrfBleDriver.BleGattsEvtExchangeMtuRequestT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Timeout Event.</summary>
            public global::NrfBleDriver.BleGattsEvtTimeoutT Timeout
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtTimeoutT.__CreateInstance(__instance.timeout);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.timeout = *(global::NrfBleDriver.BleGattsEvtTimeoutT.__Internal*) value.__Instance;
                }
            }

            /// <summary>Handle Value Notification transmission complete Event Parameters.</summary>
            public global::NrfBleDriver.BleGattsEvtHvnTxCompleteT HvnTxComplete
            {
                get
                {
                    return global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__CreateInstance(__instance.hvn_tx_complete);
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    __instance.hvn_tx_complete = *(global::NrfBleDriver.BleGattsEvtHvnTxCompleteT.__Internal*) value.__Instance;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.BleGattsEvtT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.BleGattsEvtT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.BleGattsEvtT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static BleGattsEvtT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new BleGattsEvtT(native.ToPointer(), skipVTables);
        }

        internal static BleGattsEvtT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (BleGattsEvtT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static BleGattsEvtT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new BleGattsEvtT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BleGattsEvtT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected BleGattsEvtT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public BleGattsEvtT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public BleGattsEvtT(global::NrfBleDriver.BleGattsEvtT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.BleGattsEvtT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.BleGattsEvtT.__Internal*) __Instance) = *((global::NrfBleDriver.BleGattsEvtT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        /// <summary>Connection Handle on which the event occurred.</summary>
        public ushort ConnHandle
        {
            get
            {
                return ((__Internal*)__Instance)->conn_handle;
            }

            set
            {
                ((__Internal*)__Instance)->conn_handle = value;
            }
        }

        /// <summary>Event Parameters.</summary>
        public global::NrfBleDriver.BleGattsEvtT.Params @params
        {
            get
            {
                return global::NrfBleDriver.BleGattsEvtT.Params.__CreateInstance(((__Internal*)__Instance)->@params);
            }

            set
            {
                ((__Internal*)__Instance)->@params = value.__Instance;
            }
        }
    }

    public unsafe partial class ble_gatts
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_service_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsServiceAdd(__IntPtr adapter, byte type, __IntPtr p_uuid, ushort* p_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_include_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsIncludeAdd(__IntPtr adapter, ushort service_handle, ushort inc_srvc_handle, ushort* p_include_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_characteristic_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsCharacteristicAdd(__IntPtr adapter, ushort service_handle, __IntPtr p_char_md, __IntPtr p_attr_char_value, __IntPtr p_handles);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_descriptor_add", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsDescriptorAdd(__IntPtr adapter, ushort char_handle, __IntPtr p_attr, ushort* p_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_value_set", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsValueSet(__IntPtr adapter, ushort conn_handle, ushort handle, __IntPtr p_value);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_value_get", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsValueGet(__IntPtr adapter, ushort conn_handle, ushort handle, __IntPtr p_value);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_hvx", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsHvx(__IntPtr adapter, ushort conn_handle, __IntPtr p_hvx_params);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_service_changed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsServiceChanged(__IntPtr adapter, ushort conn_handle, ushort start_handle, ushort end_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_rw_authorize_reply", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsRwAuthorizeReply(__IntPtr adapter, ushort conn_handle, __IntPtr p_rw_authorize_reply_params);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_sys_attr_set", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsSysAttrSet(__IntPtr adapter, ushort conn_handle, byte* p_sys_attr_data, ushort len, uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_sys_attr_get", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsSysAttrGet(__IntPtr adapter, ushort conn_handle, byte* p_sys_attr_data, ushort* p_sys_attr_data_len, uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_initial_user_handle_get", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsInitialUserHandleGet(__IntPtr adapter, ushort* p_handle);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_attr_get", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsAttrGet(__IntPtr adapter, ushort handle, __IntPtr p_uuid, __IntPtr p_md);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_ble_gatts_exchange_mtu_reply", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdBleGattsExchangeMtuReply(__IntPtr adapter, ushort conn_handle, ushort server_rx_mtu);
        }

        public static uint SdBleGattsServiceAdd(global::NrfBleDriver.AdapterT adapter, byte type, global::NrfBleDriver.BleUuidT p_uuid, ref ushort p_handle)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_uuid is null ? __IntPtr.Zero : p_uuid.__Instance;
            fixed (ushort* __p_handle3 = &p_handle)
            {
                var __arg3 = __p_handle3;
                var __ret = __Internal.SdBleGattsServiceAdd(__arg0, type, __arg2, __arg3);
                return __ret;
            }
        }

        public static uint SdBleGattsIncludeAdd(global::NrfBleDriver.AdapterT adapter, ushort service_handle, ushort inc_srvc_handle, ref ushort p_include_handle)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            fixed (ushort* __p_include_handle3 = &p_include_handle)
            {
                var __arg3 = __p_include_handle3;
                var __ret = __Internal.SdBleGattsIncludeAdd(__arg0, service_handle, inc_srvc_handle, __arg3);
                return __ret;
            }
        }

        public static uint SdBleGattsCharacteristicAdd(global::NrfBleDriver.AdapterT adapter, ushort service_handle, global::NrfBleDriver.BleGattsCharMdT p_char_md, global::NrfBleDriver.BleGattsAttrT p_attr_char_value, global::NrfBleDriver.BleGattsCharHandlesT p_handles)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_char_md is null ? __IntPtr.Zero : p_char_md.__Instance;
            var __arg3 = p_attr_char_value is null ? __IntPtr.Zero : p_attr_char_value.__Instance;
            var __arg4 = p_handles is null ? __IntPtr.Zero : p_handles.__Instance;
            var __ret = __Internal.SdBleGattsCharacteristicAdd(__arg0, service_handle, __arg2, __arg3, __arg4);
            return __ret;
        }

        public static uint SdBleGattsDescriptorAdd(global::NrfBleDriver.AdapterT adapter, ushort char_handle, global::NrfBleDriver.BleGattsAttrT p_attr, ref ushort p_handle)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_attr is null ? __IntPtr.Zero : p_attr.__Instance;
            fixed (ushort* __p_handle3 = &p_handle)
            {
                var __arg3 = __p_handle3;
                var __ret = __Internal.SdBleGattsDescriptorAdd(__arg0, char_handle, __arg2, __arg3);
                return __ret;
            }
        }

        public static uint SdBleGattsValueSet(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, ushort handle, global::NrfBleDriver.BleGattsValueT p_value)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg3 = p_value is null ? __IntPtr.Zero : p_value.__Instance;
            var __ret = __Internal.SdBleGattsValueSet(__arg0, conn_handle, handle, __arg3);
            return __ret;
        }

        public static uint SdBleGattsValueGet(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, ushort handle, global::NrfBleDriver.BleGattsValueT p_value)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg3 = p_value is null ? __IntPtr.Zero : p_value.__Instance;
            var __ret = __Internal.SdBleGattsValueGet(__arg0, conn_handle, handle, __arg3);
            return __ret;
        }

        public static uint SdBleGattsHvx(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, global::NrfBleDriver.BleGattsHvxParamsT p_hvx_params)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_hvx_params is null ? __IntPtr.Zero : p_hvx_params.__Instance;
            var __ret = __Internal.SdBleGattsHvx(__arg0, conn_handle, __arg2);
            return __ret;
        }

        public static uint SdBleGattsServiceChanged(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, ushort start_handle, ushort end_handle)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdBleGattsServiceChanged(__arg0, conn_handle, start_handle, end_handle);
            return __ret;
        }

        public static uint SdBleGattsRwAuthorizeReply(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, global::NrfBleDriver.BleGattsRwAuthorizeReplyParamsT p_rw_authorize_reply_params)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_rw_authorize_reply_params is null ? __IntPtr.Zero : p_rw_authorize_reply_params.__Instance;
            var __ret = __Internal.SdBleGattsRwAuthorizeReply(__arg0, conn_handle, __arg2);
            return __ret;
        }

        public static uint SdBleGattsSysAttrSet(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, byte* p_sys_attr_data, ushort len, uint flags)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdBleGattsSysAttrSet(__arg0, conn_handle, p_sys_attr_data, len, flags);
            return __ret;
        }

        public static uint SdBleGattsSysAttrGet(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, byte* p_sys_attr_data, ref ushort p_sys_attr_data_len, uint flags)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            fixed (ushort* __p_sys_attr_data_len3 = &p_sys_attr_data_len)
            {
                var __arg3 = __p_sys_attr_data_len3;
                var __ret = __Internal.SdBleGattsSysAttrGet(__arg0, conn_handle, p_sys_attr_data, __arg3, flags);
                return __ret;
            }
        }

        public static uint SdBleGattsInitialUserHandleGet(global::NrfBleDriver.AdapterT adapter, ref ushort p_handle)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            fixed (ushort* __p_handle1 = &p_handle)
            {
                var __arg1 = __p_handle1;
                var __ret = __Internal.SdBleGattsInitialUserHandleGet(__arg0, __arg1);
                return __ret;
            }
        }

        public static uint SdBleGattsAttrGet(global::NrfBleDriver.AdapterT adapter, ushort handle, global::NrfBleDriver.BleUuidT p_uuid, global::NrfBleDriver.BleGattsAttrMdT p_md)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg2 = p_uuid is null ? __IntPtr.Zero : p_uuid.__Instance;
            var __arg3 = p_md is null ? __IntPtr.Zero : p_md.__Instance;
            var __ret = __Internal.SdBleGattsAttrGet(__arg0, handle, __arg2, __arg3);
            return __ret;
        }

        public static uint SdBleGattsExchangeMtuReply(global::NrfBleDriver.AdapterT adapter, ushort conn_handle, ushort server_rx_mtu)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdBleGattsExchangeMtuReply(__arg0, conn_handle, server_rx_mtu);
            return __ret;
        }
    }
}
