// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NrfBleDriver
{
    public unsafe partial class sd_rpc
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_serial_port_enum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdRpcSerialPortEnum(global::NrfBleDriver.SdRpcSerialPortDescT.__Internal[] serial_port_descs, uint* size);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_physical_layer_create_uart", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SdRpcPhysicalLayerCreateUart([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string port_name, uint baud_rate, global::NrfBleDriver.SdRpcFlowControlT flow_control, global::NrfBleDriver.SdRpcParityT parity);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_data_link_layer_create_bt_three_wire", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SdRpcDataLinkLayerCreateBtThreeWire(__IntPtr physical_layer, uint retransmission_interval);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_transport_layer_create", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SdRpcTransportLayerCreate(__IntPtr data_link_layer, uint response_timeout);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_adapter_create", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr SdRpcAdapterCreate(__IntPtr transport_layer);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_adapter_delete", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SdRpcAdapterDelete(__IntPtr adapter);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_open", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdRpcOpen(__IntPtr adapter, __IntPtr status_handler, __IntPtr event_handler, __IntPtr log_handler);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdRpcClose(__IntPtr adapter);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_log_handler_severity_filter_set", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdRpcLogHandlerSeverityFilterSet(__IntPtr adapter, global::NrfBleDriver.SdRpcLogSeverityT severity_filter);

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "sd_rpc_conn_reset", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SdRpcConnReset(__IntPtr adapter, global::NrfBleDriver.SdRpcResetT reset_mode);
        }

        /// <summary>Enumerate available serial ports.</summary>
        /// <param name="serial_port_descs">The array of serial port descriptors to be filled in.</param>
        /// <param name="size">The size of the array. The number of ports found is stored here.</param>
        /// <remarks>
        /// <para>NRF_SUCCESS  The serial ports were enumerated successfully.</para>
        /// <para>NRF_ERROR_NULL size was a null pointer.</para>
        /// <para>NRF_ERROR_DATA_SIZE The size of the array was not large enough to keep all descriptors found.</para>
        /// <para>No descriptors where copied. Call again with an larger array.</para>
        /// <para>NRF_ERROR    There was an error enumerating the serial ports.</para>
        /// </remarks>
        public static uint SdRpcSerialPortEnum(global::NrfBleDriver.SdRpcSerialPortDescT[] serial_port_descs, ref uint size)
        {
            global::NrfBleDriver.SdRpcSerialPortDescT.__Internal[] __serial_port_descs;
            if (serial_port_descs == null)
                __serial_port_descs = null;
            else
            {
                __serial_port_descs = new global::NrfBleDriver.SdRpcSerialPortDescT.__Internal[serial_port_descs.Length];
                for (int i = 0; i < __serial_port_descs.Length; i++)
                {
                    var __element = serial_port_descs[i];
                    __serial_port_descs[i] = __element is null ? new global::NrfBleDriver.SdRpcSerialPortDescT.__Internal() : *(global::NrfBleDriver.SdRpcSerialPortDescT.__Internal*) __element.__Instance;
                }
            }
            var __arg0 = __serial_port_descs;
            fixed (uint* __size1 = &size)
            {
                var __arg1 = __size1;
                var __ret = __Internal.SdRpcSerialPortEnum(__arg0, __arg1);
                return __ret;
            }
        }

        /// <summary>Create a new serial physical layer.</summary>
        /// <param name="port_name">The serial port name.</param>
        /// <param name="baud_rate">The serial port speed.</param>
        /// <param name="flow_control">The flow control scheme to use.</param>
        /// <param name="parity">The parity scheme to use.</param>
        /// <remarks>The physical layer or NULL.</remarks>
        public static global::NrfBleDriver.PhysicalLayerT SdRpcPhysicalLayerCreateUart(string port_name, uint baud_rate, global::NrfBleDriver.SdRpcFlowControlT flow_control, global::NrfBleDriver.SdRpcParityT parity)
        {
            var __ret = __Internal.SdRpcPhysicalLayerCreateUart(port_name, baud_rate, flow_control, parity);
            var __result0 = global::NrfBleDriver.PhysicalLayerT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Create a new data link layer.</summary>
        /// <param name="physical_layer">The physical layer to use with this data link layer.</param>
        /// <param name="response_timeout">Response timeout of the data link layer.</param>
        /// <remarks>The data link layer or NULL.</remarks>
        public static global::NrfBleDriver.DataLinkLayerT SdRpcDataLinkLayerCreateBtThreeWire(global::NrfBleDriver.PhysicalLayerT physical_layer, uint retransmission_interval)
        {
            var __arg0 = physical_layer is null ? __IntPtr.Zero : physical_layer.__Instance;
            var __ret = __Internal.SdRpcDataLinkLayerCreateBtThreeWire(__arg0, retransmission_interval);
            var __result0 = global::NrfBleDriver.DataLinkLayerT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Create a new transport layer.</summary>
        /// <param name="data_link_layer">The data linkk layer to use with this transport.</param>
        /// <param name="response_timeout">Response timeout.</param>
        /// <remarks>The transport layer or NULL.</remarks>
        public static global::NrfBleDriver.TransportLayerT SdRpcTransportLayerCreate(global::NrfBleDriver.DataLinkLayerT data_link_layer, uint response_timeout)
        {
            var __arg0 = data_link_layer is null ? __IntPtr.Zero : data_link_layer.__Instance;
            var __ret = __Internal.SdRpcTransportLayerCreate(__arg0, response_timeout);
            var __result0 = global::NrfBleDriver.TransportLayerT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Create a new transport adapter.</summary>
        /// <param name="transport_layer">The transport layer to use with this adapter.</param>
        /// <remarks>The adapter or NULL.</remarks>
        public static global::NrfBleDriver.AdapterT SdRpcAdapterCreate(global::NrfBleDriver.TransportLayerT transport_layer)
        {
            var __arg0 = transport_layer is null ? __IntPtr.Zero : transport_layer.__Instance;
            var __ret = __Internal.SdRpcAdapterCreate(__arg0);
            var __result0 = global::NrfBleDriver.AdapterT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Delete a transport adapter.</summary>
        /// <param name="adapter">The transport adapter.</param>
        public static void SdRpcAdapterDelete(global::NrfBleDriver.AdapterT adapter)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            __Internal.SdRpcAdapterDelete(__arg0);
        }

        /// <summary>Initialize the SoftDevice RPC module.</summary>
        /// <param name="adapter">The transport adapter.</param>
        /// <param name="status_handler">The status handler callback.</param>
        /// <param name="evt_handler">The event handler callback.</param>
        /// <param name="log_handler">The log handler callback.</param>
        /// <remarks>
        /// <para>This function must be called prior to the sd_ble_* API commands.</para>
        /// <para>The serial port will be attempted opened with the configured serial port settings.</para>
        /// <para>NRF_SUCCESS  The module was opened successfully.</para>
        /// <para>NRF_ERROR    There was an error opening the module.</para>
        /// </remarks>
        public static uint SdRpcOpen(global::NrfBleDriver.AdapterT adapter, global::NrfBleDriver.SdRpcStatusHandlerT status_handler, global::NrfBleDriver.SdRpcEvtHandlerT event_handler, global::NrfBleDriver.SdRpcLogHandlerT log_handler)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __arg1 = status_handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(status_handler);
            var __arg2 = event_handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(event_handler);
            var __arg3 = log_handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(log_handler);
            var __ret = __Internal.SdRpcOpen(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        /// <summary>Close the SoftDevice RPC module.</summary>
        /// <param name="adapter">The transport adapter.</param>
        /// <remarks>
        /// <para>This function will close the serial port and release allocated resources.</para>
        /// <para>NRF_SUCCESS  The module was closed successfully.</para>
        /// <para>NRF_ERROR    There was an error closing the module.</para>
        /// </remarks>
        public static uint SdRpcClose(global::NrfBleDriver.AdapterT adapter)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdRpcClose(__arg0);
            return __ret;
        }

        /// <summary>
        /// <para>Set the lowest log level for messages to be logged to handler.</para>
        /// <para>Default log handler severity filter is LOG_INFO.</para>
        /// </summary>
        /// <param name="adapter">The transport adapter.</param>
        /// <param name="severity_filter">The lowest severity level messages should be logged.</param>
        /// <remarks>
        /// <para>NRF_SUCCESS              severity_filter is valid.</para>
        /// <para>NRF_ERROR_INVALID_PARAM  severity_filter is not one of the valid enum values</para>
        /// <para>in app_log_severity_t</para>
        /// </remarks>
        public static uint SdRpcLogHandlerSeverityFilterSet(global::NrfBleDriver.AdapterT adapter, global::NrfBleDriver.SdRpcLogSeverityT severity_filter)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdRpcLogHandlerSeverityFilterSet(__arg0, severity_filter);
            return __ret;
        }

        /// <summary>Reset the connectivity chip.</summary>
        /// <param name="adapter">The transport adapter.</param>
        /// <param name="reset_mode">The reset mode to perform in connectivity firmware.</param>
        /// <remarks>
        /// <para>NRF_SUCCESS  The connectivity chip was reset successfully.</para>
        /// <para>NRF_ERROR    There was an error reset the connectivity chip.</para>
        /// </remarks>
        public static uint SdRpcConnReset(global::NrfBleDriver.AdapterT adapter, global::NrfBleDriver.SdRpcResetT reset_mode)
        {
            var __arg0 = adapter is null ? __IntPtr.Zero : adapter.__Instance;
            var __ret = __Internal.SdRpcConnReset(__arg0, reset_mode);
            return __ret;
        }
    }
}
