// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NrfBleDriver
{
    /// <summary>Error codes that an error callback can be associated with.</summary>
    public enum SdRpcAppStatusT
    {
        PKT_SEND_MAX_RETRIES_REACHED = 0,
        PKT_UNEXPECTED = 1,
        PKT_ENCODE_ERROR = 2,
        PKT_DECODE_ERROR = 3,
        PKT_SEND_ERROR = 4,
        IO_RESOURCES_UNAVAILABLE = 5,
        RESET_PERFORMED = 6,
        CONNECTION_ACTIVE = 7
    }

    /// <summary>Levels of severity that a log message can be associated with.</summary>
    public enum SdRpcLogSeverityT
    {
        SD_RPC_LOG_TRACE = 0,
        SD_RPC_LOG_DEBUG = 1,
        SD_RPC_LOG_INFO = 2,
        SD_RPC_LOG_WARNING = 3,
        SD_RPC_LOG_ERROR = 4,
        SD_RPC_LOG_FATAL = 5
    }

    /// <summary>Flow control modes</summary>
    public enum SdRpcFlowControlT
    {
        SD_RPC_FLOW_CONTROL_NONE = 0,
        SD_RPC_FLOW_CONTROL_HARDWARE = 1
    }

    /// <summary>Parity modes</summary>
    public enum SdRpcParityT
    {
        SD_RPC_PARITY_NONE = 0,
        SD_RPC_PARITY_EVEN = 1
    }

    /// <summary>Reset modes to specify how the connectivity firmware will perform a reset.</summary>
    public enum SdRpcResetT
    {
        SYS_RESET = 0,
        /// <summary>System reset of the connectivity chip, all state is reset.</summary>
        SOFT_RESET = 1
    }

    /// <summary>Error codes that an error callback can be associated with.</summary>
    /// <summary>Error codes that an error callback can be associated with.</summary>
    /// <summary>Levels of severity that a log message can be associated with.</summary>
    /// <summary>Flow control modes</summary>
    /// <summary>Parity modes</summary>
    /// <summary>Reset modes to specify how the connectivity firmware will perform a reset.</summary>
    /// <summary>Function pointer type for event callbacks.</summary>
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void SdRpcStatusHandlerT(__IntPtr adapter, global::NrfBleDriver.SdRpcAppStatusT code, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void SdRpcEvtHandlerT(__IntPtr adapter, __IntPtr p_ble_evt);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void SdRpcLogHandlerT(__IntPtr adapter, global::NrfBleDriver.SdRpcLogSeverityT severity, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string log_message);

    /// <summary>Error codes that an error callback can be associated with.</summary>
    public unsafe partial class SdRpcSerialPortDescT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 3584)]
        public partial struct __Internal
        {
            internal fixed sbyte port[512];
            internal fixed sbyte manufacturer[512];
            internal fixed sbyte serialNumber[512];
            internal fixed sbyte pnpId[512];
            internal fixed sbyte locationId[512];
            internal fixed sbyte vendorId[512];
            internal fixed sbyte productId[512];

            [SuppressUnmanagedCodeSecurity, DllImport("NrfBleDriver", EntryPoint = "??0sd_rpc_serial_port_desc_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.SdRpcSerialPortDescT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NrfBleDriver.SdRpcSerialPortDescT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NrfBleDriver.SdRpcSerialPortDescT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NrfBleDriver.SdRpcSerialPortDescT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SdRpcSerialPortDescT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new SdRpcSerialPortDescT(native.ToPointer(), skipVTables);
        }

        internal static SdRpcSerialPortDescT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SdRpcSerialPortDescT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SdRpcSerialPortDescT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SdRpcSerialPortDescT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SdRpcSerialPortDescT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SdRpcSerialPortDescT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SdRpcSerialPortDescT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.SdRpcSerialPortDescT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public SdRpcSerialPortDescT(global::NrfBleDriver.SdRpcSerialPortDescT __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NrfBleDriver.SdRpcSerialPortDescT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NrfBleDriver.SdRpcSerialPortDescT.__Internal*) __Instance) = *((global::NrfBleDriver.SdRpcSerialPortDescT.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] Port
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->port, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->port[i] = value[i];
                }
            }
        }

        public sbyte[] Manufacturer
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->manufacturer, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->manufacturer[i] = value[i];
                }
            }
        }

        public sbyte[] SerialNumber
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->serialNumber, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->serialNumber[i] = value[i];
                }
            }
        }

        public sbyte[] PnpId
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->pnpId, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->pnpId[i] = value[i];
                }
            }
        }

        public sbyte[] LocationId
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->locationId, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->locationId[i] = value[i];
                }
            }
        }

        public sbyte[] VendorId
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->vendorId, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->vendorId[i] = value[i];
                }
            }
        }

        public sbyte[] ProductId
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->productId, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->productId[i] = value[i];
                }
            }
        }
    }
}
